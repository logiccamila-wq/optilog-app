name: Firebase Preview Deploy (WIF)

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  preview:
    if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
    name: Build and Preview on Firebase Hosting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR head commit
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Validate WIF configuration variables (only when using WIF)
        if: ${{ secrets.GCP_SA_KEY == '' }}
        shell: bash
        run: |
          set -euo pipefail
          echo "GCP_WIF_PROVIDER=${{ vars.GCP_WIF_PROVIDER }}"
          echo "GCP_SERVICE_ACCOUNT=${{ vars.GCP_SERVICE_ACCOUNT }}"
          PROVIDER='${{ vars.GCP_WIF_PROVIDER }}'
          # Falha se vazio, se contiver placeholders <...>, espaços ou texto explicativo
          if [[ -z "$PROVIDER" || "$PROVIDER" == *"<"* || "$PROVIDER" == *">"* || "$PROVIDER" == *"substitua"* || "$PROVIDER" == *"("* || "$PROVIDER" == *")"* ]]; then
            echo "❌ GCP_WIF_PROVIDER inválido. Use o recurso completo do provider sem comentários/placeholder: projects/<PROJECT_NUMBER>/locations/global/workloadIdentityPools/<POOL_ID>/providers/<PROVIDER_ID>" >&2
            exit 1
          fi
          SA='${{ vars.GCP_SERVICE_ACCOUNT }}'
          if [[ -z "$SA" || "$SA" == *"("* || "$SA" == *")"* ]]; then
            echo "❌ GCP_SERVICE_ACCOUNT inválido. Use o e-mail da service account sem comentários (ex.: firebase-deployer@<PROJECT_ID>.iam.gserviceaccount.com)." >&2
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint (if available)
        run: |
          if npm run | grep -q "lint"; then
            npm run lint
          else
            echo "No lint script defined; skipping"
          fi

      - name: Run tests (if available)
        run: |
          if npm run | grep -q "test"; then
            npm test -- --ci || npm test
          else
            echo "No test script defined; skipping"
          fi

      - name: Typecheck (optional)
        run: |
          if [ -f tsconfig.json ]; then
            npm run typecheck || true
          fi

      - name: Build project
        run: npm run build
        env:
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}

      - name: Authenticate to Google Cloud (Service Account JSON)
        if: ${{ secrets.GCP_SA_KEY != '' }}
        uses: google-github-actions/auth@c200f3691d83b41bf9bbd8638997a462592937ed
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Authenticate to Google Cloud (WIF)
        if: ${{ secrets.GCP_SA_KEY == '' }}
        uses: google-github-actions/auth@c200f3691d83b41bf9bbd8638997a462592937ed
        with:
          workload_identity_provider: ${{ vars.GCP_WIF_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - name: Install Firebase CLI
        run: npm i -g firebase-tools

      - name: Deploy preview channel
        id: deploy
        shell: bash
        run: |
          set -euo pipefail
          CHANNEL_ID="pr-${{ github.event.number }}"
          echo "Deploying to channel: ${CHANNEL_ID}"
          # TTL padrão 7 dias; usa projeto do .firebaserc ou variável GCP_PROJECT_ID se definida
          PROJECT='${{ vars.GCP_PROJECT_ID }}'
          if [[ -n "$PROJECT" && "$PROJECT" != "null" ]]; then
            echo "Using project: $PROJECT"
            firebase hosting:channel:deploy "${CHANNEL_ID}" --project "$PROJECT" --json > deploy.json
          else
            firebase hosting:channel:deploy "${CHANNEL_ID}" --json > deploy.json
          fi
          echo "Deploy output saved to deploy.json"
          cat deploy.json

      - name: Extract preview URL
        id: extract
        shell: bash
        run: |
          set -euo pipefail
          URL=$(jq -r '.result[]?.details[]?.url // .result[]?.url // .result?.details?.url // .result?.url' deploy.json | head -n1)
          if [[ -z "$URL" || "$URL" == "null" ]]; then
            echo "❌ Não foi possível extrair a URL de preview." >&2
            exit 1
          fi
          echo "Preview URL: $URL"
          echo "PREVIEW_URL=$URL" >> "$GITHUB_ENV"

      - name: Comment preview URL on PR
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b
        with:
          script: |
            const url = process.env.PREVIEW_URL;
            if (!url) {
              core.setFailed('Preview URL não encontrada no ambiente.');
            } else {
              const body = `✅ Firebase Preview disponível:\n\n${url}\n\nCanal: pr-${{ github.event.number }} (expira em 7 dias)`;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body,
              });
            }
