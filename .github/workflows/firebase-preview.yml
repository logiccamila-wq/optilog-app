name: Firebase Preview Deploy (WIF)

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  preview:
    name: Build and Preview on Firebase Hosting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR head commit
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Validate WIF configuration variables
        shell: bash
        run: |
          set -euo pipefail
          echo "GCP_WIF_PROVIDER=${{ vars.GCP_WIF_PROVIDER }}"
          echo "GCP_SERVICE_ACCOUNT=${{ vars.GCP_SERVICE_ACCOUNT }}"
          if [[ -z "${{ vars.GCP_WIF_PROVIDER }}" || "${{ vars.GCP_WIF_PROVIDER }}" == *"<POOL_ID>"* || "${{ vars.GCP_WIF_PROVIDER }}" == *"<PROVIDER_ID>"* ]]; then
            echo "❌ GCP_WIF_PROVIDER inválido. Configure com o caminho real do provider (projects/<PROJECT_NUMBER>/locations/global/workloadIdentityPools/<POOL_ID>/providers/<PROVIDER_ID>)." >&2
            exit 1
          fi
          if [[ -z "${{ vars.GCP_SERVICE_ACCOUNT }}" || "${{ vars.GCP_SERVICE_ACCOUNT }}" == *"("* ]]; then
            echo "❌ GCP_SERVICE_ACCOUNT inválido. Use o e-mail da service account sem comentários (ex.: firebase-deployer@<PROJECT_ID>.iam.gserviceaccount.com)." >&2
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Typecheck (optional)
        run: |
          if [ -f tsconfig.json ]; then
            npm run typecheck || true
          fi

      - name: Build project
        run: npm run build

      - name: Authenticate to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.GCP_WIF_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - name: Install Firebase CLI
        run: npm i -g firebase-tools

      - name: Deploy preview channel
        id: deploy
        shell: bash
        run: |
          set -euo pipefail
          CHANNEL_ID="pr-${{ github.event.number }}"
          echo "Deploying to channel: ${CHANNEL_ID}"
          # TTL padrão 7 dias; usa projeto default do .firebaserc
          firebase hosting:channel:deploy "${CHANNEL_ID}" --json > deploy.json
          echo "Deploy output saved to deploy.json"
          cat deploy.json

      - name: Extract preview URL
        id: extract
        shell: bash
        run: |
          set -euo pipefail
          URL=$(jq -r '.result[]?.details[]?.url // .result[]?.url // .result?.details?.url // .result?.url' deploy.json | head -n1)
          if [[ -z "$URL" || "$URL" == "null" ]]; then
            echo "❌ Não foi possível extrair a URL de preview." >&2
            exit 1
          fi
          echo "Preview URL: $URL"
          echo "PREVIEW_URL=$URL" >> "$GITHUB_ENV"

      - name: Comment preview URL on PR
        uses: actions/github-script@v7
        with:
          script: |
            const url = process.env.PREVIEW_URL;
            if (!url) {
              core.setFailed('Preview URL não encontrada no ambiente.');
            } else {
              const body = `✅ Firebase Preview disponível:\n\n${url}\n\nCanal: pr-${{ github.event.number }} (expira em 7 dias)`;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body,
              });
            }
